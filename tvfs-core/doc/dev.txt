
le scheme est tvfs.

le fs est basé sur un autre FS qui doit déjà exister.

principe de codage :
-mettre les @Override pour chaque methode dérivé
-utiliser uniquement les logs du JDK pour rester portable
-aucune dépendence

todo :
-voir comment gérer la casse pour les startWith et endWith
-gerer le directorystream
-gérer le watch
-voir comment mieux gérer le RealPath (une seule methode, interdire l'accès, etc..)
-enlever tous les unsupportedOperation()
-faire tu et TI pour chaque classe avec couverture à 100%
-vérifier qu'il n'y a pas de problème sous windows et sous linux
-vérifier que les / et\ sont bien géré sous windows et qu'il n'y a pas d'effet de bord sous linux
-faire des tests complet avec les différents mode de configuration (cad un sous module par test)
-améliorer relativize pour mieux gérer les chemin avec .. (c-a-d 2 chemins relativ=f par un ou plusieurs ..)
-gérer dans relativize la casse
-vérifier et tester que les operations sur path sont bien bloqués si le root name est différent (suivant la methode)
-ajouter une methode dans tools pour avoir le nom du root name
-pour la configuration gérer un mode (readonly, writeonly, readwrite)
-pour la configuration, permettre de bloquer la modification de la configuration
-pour la configuration, pouvoir indiquer le filesystem parent
-finir directoryStream
-finir watch
-bien tester les methodes non testé (directorystream, watch, mesthodes de path)
-ajouter une vérification pour toutes les methodes qui retourne un path
-vérifier tous les paramètres d'entrés
-ajouter des logs pour mieux auditer les traitements
-permettre d'ajouter des listenner pour auditer les operations (peut être les bloquer)
-permetre de retourner un fichier généré par du code
-faire des vérification que l'on ne peut pas sortir du repertoire virtuel
-prévoir un mode sécuriser et un mode qui respecte la spec
-réflechir pour pouvoir faire des tests avec des paramètres du FS différents
(peut être par exemple avec un autre projet equivalent à au module api, mais spécifique aux tests)

